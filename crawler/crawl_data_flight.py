# import requests
# import json
# import datetime
# from typing import List, Dict, Optional
# import time
# from elasticsearch import Elasticsearch
# from elasticsearch.helpers import bulk

# class FlightCrawler:
#     """Crawl d·ªØ li·ªáu chuy·∫øn bay t·ªõi c√°c th√†nh ph·ªë du l·ªãch Vi·ªát Nam"""
    
#     def __init__(self, api_key: str, elasticsearch_host: str = "http://localhost:9200"):
#         self.api_key = api_key
#         self.base_url = "https://api.aviationstack.com/v1/flights"
        
#         # K·∫øt n·ªëi Elasticsearch
#         try:
#             self.es = Elasticsearch(elasticsearch_host)
#             # Test k·∫øt n·ªëi
#             if self.es.ping():
#                 print(f"‚úÖ K·∫øt n·ªëi Elasticsearch th√†nh c√¥ng: {elasticsearch_host}")
#             else:
#                 print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi Elasticsearch: {elasticsearch_host}")
#                 self.es = None
#         except Exception as e:
#             print(f"‚ùå L·ªói k·∫øt n·ªëi Elasticsearch: {e}")
#             self.es = None
        
#         # Danh s√°ch c√°c s√¢n bay du l·ªãch ch√≠nh t·∫°i Vi·ªát Nam
#         self.vietnam_airports = {
#             "SGN": {
#                 "name": "T√¢n S∆°n Nh·∫•t", 
#                 "city": "H·ªì Ch√≠ Minh (S√†i G√≤n)",
#                 "region": "Mi·ªÅn Nam"
#             },
#             "HAN": {
#                 "name": "N·ªôi B√†i", 
#                 "city": "H√† N·ªôi",
#                 "region": "Mi·ªÅn B·∫Øc"
#             },
#             "DAD": {
#                 "name": "ƒê√† N·∫µng", 
#                 "city": "ƒê√† N·∫µng", 
#                 "region": "Mi·ªÅn Trung"
#             },
#             "PQC": {
#                 "name": "Ph√∫ Qu·ªëc", 
#                 "city": "Ph√∫ Qu·ªëc",
#                 "region": "Mi·ªÅn Nam"
#             },
#             "CXR": {
#                 "name": "Cam Ranh", 
#                 "city": "Nha Trang",
#                 "region": "Mi·ªÅn Trung"
#             },
#             "HPH": {
#                 "name": "C√°t Bi", 
#                 "city": "H·∫£i Ph√≤ng",
#                 "region": "Mi·ªÅn B·∫Øc"
#             },
#             "HUI": {
#                 "name": "Ph√∫ B√†i", 
#                 "city": "Hu·∫ø",
#                 "region": "Mi·ªÅn Trung"
#             },
#             "VCA": {
#                 "name": "C·∫ßn Th∆°", 
#                 "city": "C·∫ßn Th∆°",
#                 "region": "Mi·ªÅn Nam"
#             }
#         }
        
#         # C√°c h√£ng h√†ng kh√¥ng Vi·ªát Nam
#         self.vietnam_airlines = [
#             "VN",  # Vietnam Airlines
#             "VJ",  # VietJet Air
#             "QH",  # Bamboo Airways
#             "BL"   # Jetstar Pacific
#         ]

#     def test_api_connection(self) -> bool:
#         """Test k·∫øt n·ªëi API v·ªõi m·ªôt request ƒë∆°n gi·∫£n"""
#         print("üîç ƒêang test k·∫øt n·ªëi API aviationstack...")
        
#         params = {
#             'access_key': self.api_key,
#             'limit': 1
#         }
        
#         try:
#             response = requests.get(self.base_url, params=params)
            
#             if response.status_code == 200:
#                 data = response.json()
#                 print(f"‚úÖ API ho·∫°t ƒë·ªông t·ªët. T√¨m th·∫•y {data.get('pagination', {}).get('total', 0)} chuy·∫øn bay")
#                 return True
#             elif response.status_code == 401:
#                 print("‚ùå API Key kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n")
#                 return False
#             elif response.status_code == 429:
#                 print("‚ùå ƒê√£ v∆∞·ª£t quota API (100 requests/th√°ng)")
#                 return False
#             else:
#                 print(f"‚ùå L·ªói API: {response.status_code}")
#                 print(f"Response: {response.text}")
#                 return False
                
#         except Exception as e:
#             print(f"‚ùå L·ªói k·∫øt n·ªëi API: {e}")
#             return False

#     def get_flights_to_airport(self, airport_iata: str, limit: int = 50) -> Dict:
#         """L·∫•y d·ªØ li·ªáu chuy·∫øn bay ƒë·∫øn m·ªôt s√¢n bay c·ª• th·ªÉ"""
#         print(f"ƒêang l·∫•y d·ªØ li·ªáu chuy·∫øn bay t·ªõi {airport_iata} - {self.vietnam_airports[airport_iata]['city']}")
        
#         params = {
#             'access_key': self.api_key,
#             'arr_iata': airport_iata,
#             'limit': limit
#         }
        
#         try:
#             response = requests.get(self.base_url, params=params)
#             print(f"API Response Status: {response.status_code}")
            
#             if response.status_code == 200:
#                 data = response.json()
#                 print(f"T√¨m th·∫•y {len(data.get('data', []))} chuy·∫øn bay t·ªõi {airport_iata}")
#                 return data
#             else:
#                 print(f"L·ªói API: {response.status_code}")
#                 print(f"Response: {response.text}")
#                 return {"error": response.text, "data": []}
                
#         except Exception as e:
#             print(f"L·ªói khi g·ªçi API: {e}")
#             return {"error": str(e), "data": []}

#     def get_flights_from_airport(self, airport_iata: str, limit: int = 50) -> Dict:
#         """L·∫•y d·ªØ li·ªáu chuy·∫øn bay t·ª´ m·ªôt s√¢n bay c·ª• th·ªÉ"""
#         print(f"ƒêang l·∫•y d·ªØ li·ªáu chuy·∫øn bay t·ª´ {airport_iata} - {self.vietnam_airports[airport_iata]['city']}")
        
#         params = {
#             'access_key': self.api_key,
#             'dep_iata': airport_iata,
#             'limit': limit
#         }
        
#         try:
#             response = requests.get(self.base_url, params=params)
#             print(f"API Response Status: {response.status_code}")
            
#             if response.status_code == 200:
#                 data = response.json()
#                 print(f"T√¨m th·∫•y {len(data.get('data', []))} chuy·∫øn bay t·ª´ {airport_iata}")
#                 return data
#             else:
#                 print(f"L·ªói API: {response.status_code}")
#                 print(f"Response: {response.text}")
#                 return {"error": response.text, "data": []}
                
#         except Exception as e:
#             print(f"L·ªói khi g·ªçi API: {e}")
#             return {"error": str(e), "data": []}

#     def get_domestic_flights(self, limit: int = 100) -> Dict:
#         """L·∫•y d·ªØ li·ªáu chuy·∫øn bay n·ªôi ƒë·ªãa t·ªõi c√°c th√†nh ph·ªë du l·ªãch"""
#         print("=== CRAWL CHUY·∫æN BAY N·ªòI ƒê·ªäA ===")
        
#         all_flights = []
        
#         # L·∫•y chuy·∫øn bay t·ªõi m·ªói s√¢n bay du l·ªãch
#         for airport_code in self.vietnam_airports.keys():
#             flights_data = self.get_flights_to_airport(airport_code, limit // len(self.vietnam_airports))
            
#             if 'data' in flights_data:
#                 # L·ªçc chuy·∫øn bay n·ªôi ƒë·ªãa (t·ª´ v√† t·ªõi ƒë·ªÅu ·ªü Vi·ªát Nam)
#                 domestic_flights = []
#                 for flight in flights_data['data']:
#                     dep_airport = flight.get('departure', {}).get('iata', '')
#                     arr_airport = flight.get('arrival', {}).get('iata', '')
                    
#                     # Ki·ªÉm tra c·∫£ hai s√¢n bay ƒë·ªÅu ·ªü Vi·ªát Nam
#                     if (dep_airport in self.vietnam_airports.keys() and 
#                         arr_airport in self.vietnam_airports.keys()):
                        
#                         # Th√™m th√¥ng tin th√†nh ph·ªë du l·ªãch
#                         flight['destination_info'] = self.vietnam_airports[arr_airport]
#                         flight['origin_info'] = self.vietnam_airports[dep_airport]
#                         domestic_flights.append(flight)
                
#                 all_flights.extend(domestic_flights)
            
#             # T·∫°m d·ª´ng ƒë·ªÉ tr√°nh v∆∞·ª£t rate limit
#             time.sleep(1)
        
#         return {
#             "total_flights": len(all_flights),
#             "data": all_flights,
#             "crawl_time": datetime.datetime.now().isoformat(),
#             "airports_covered": list(self.vietnam_airports.keys())
#         }

#     def get_international_flights_to_vietnam(self, limit: int = 100) -> Dict:
#         """L·∫•y d·ªØ li·ªáu chuy·∫øn bay qu·ªëc t·∫ø t·ªõi Vi·ªát Nam"""
#         print("=== CRAWL CHUY·∫æN BAY QU·ªêC T·∫æ T·ªöI VI·ªÜT NAM ===")
        
#         all_flights = []
        
#         # T·∫≠p trung v√†o 3 s√¢n bay qu·ªëc t·∫ø ch√≠nh
#         main_airports = ["SGN", "HAN", "DAD"]
        
#         for airport_code in main_airports:
#             flights_data = self.get_flights_to_airport(airport_code, limit // len(main_airports))
            
#             if 'data' in flights_data:
#                 # L·ªçc chuy·∫øn bay qu·ªëc t·∫ø (t·ª´ n∆∞·ªõc ngo√†i t·ªõi Vi·ªát Nam)
#                 international_flights = []
#                 for flight in flights_data['data']:
#                     dep_airport = flight.get('departure', {}).get('iata', '')
#                     arr_airport = flight.get('arrival', {}).get('iata', '')
                    
#                     # Ki·ªÉm tra chuy·∫øn bay t·ª´ n∆∞·ªõc ngo√†i t·ªõi Vi·ªát Nam
#                     if (dep_airport not in self.vietnam_airports.keys() and 
#                         arr_airport in self.vietnam_airports.keys()):
                        
#                         # Th√™m th√¥ng tin th√†nh ph·ªë du l·ªãch
#                         flight['destination_info'] = self.vietnam_airports[arr_airport]
#                         international_flights.append(flight)
                
#                 all_flights.extend(international_flights)
            
#             # T·∫°m d·ª´ng ƒë·ªÉ tr√°nh v∆∞·ª£t rate limit
#             time.sleep(1)
        
#         return {
#             "total_flights": len(all_flights),
#             "data": all_flights,
#             "crawl_time": datetime.datetime.now().isoformat(),
#             "airports_covered": main_airports
#         }

#     def process_flight_data(self, flight: Dict) -> Dict:
#         """X·ª≠ l√Ω v√† chu·∫©n h√≥a d·ªØ li·ªáu chuy·∫øn bay"""
#         processed = {
#             "flight_info": {
#                 "number": flight.get('flight', {}).get('number', ''),
#                 "iata": flight.get('flight', {}).get('iata', ''),
#                 "date": flight.get('flight_date', ''),
#                 "status": flight.get('flight_status', '')
#             },
#             "airline": {
#                 "name": flight.get('airline', {}).get('name', ''),
#                 "iata": flight.get('airline', {}).get('iata', ''),
#                 "icao": flight.get('airline', {}).get('icao', '')
#             },
#             "departure": {
#                 "airport": flight.get('departure', {}).get('airport', ''),
#                 "iata": flight.get('departure', {}).get('iata', ''),
#                 "city": flight.get('origin_info', {}).get('city', ''),
#                 "terminal": flight.get('departure', {}).get('terminal', ''),
#                 "gate": flight.get('departure', {}).get('gate', ''),
#                 "scheduled": flight.get('departure', {}).get('scheduled', ''),
#                 "estimated": flight.get('departure', {}).get('estimated', ''),
#                 "actual": flight.get('departure', {}).get('actual', ''),
#                 "delay": flight.get('departure', {}).get('delay', 0)
#             },
#             "arrival": {
#                 "airport": flight.get('arrival', {}).get('airport', ''),
#                 "iata": flight.get('arrival', {}).get('iata', ''),
#                 "city": flight.get('destination_info', {}).get('city', ''),
#                 "region": flight.get('destination_info', {}).get('region', ''),
#                 "terminal": flight.get('arrival', {}).get('terminal', ''),
#                 "gate": flight.get('arrival', {}).get('gate', ''),
#                 "scheduled": flight.get('arrival', {}).get('scheduled', ''),
#                 "estimated": flight.get('arrival', {}).get('estimated', ''),
#                 "actual": flight.get('arrival', {}).get('actual', ''),
#                 "delay": flight.get('arrival', {}).get('delay', 0)
#             },
#             "aircraft": flight.get('aircraft', {}),
#             "live": flight.get('live', {})
#         }
        
#         return processed

    

#     def crawl_all_vietnam_flights(self):
#         """Crawl t·∫•t c·∫£ d·ªØ li·ªáu chuy·∫øn bay li√™n quan ƒë·∫øn du l·ªãch Vi·ªát Nam"""
#         print("="*60)
#         print("B·∫ÆT ƒê·∫¶U CRAWL D·ªÆ LI·ªÜU CHUY·∫æN BAY DU L·ªäCH VI·ªÜT NAM")
#         print("="*60)
        
#         # Test API tr∆∞·ªõc khi crawl
#         if not self.test_api_connection():
#             print("‚ö†Ô∏è API kh√¥ng kh·∫£ d·ª•ng. S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u ƒë·ªÉ demo...")
#             sample_data = self.get_sample_flight_data()
            
#             # X·ª≠ l√Ω d·ªØ li·ªáu m·∫´u
#             processed_domestic = []
#             for flight in sample_data['domestic_flights']['data']:
#                 processed_domestic.append(self.process_flight_data(flight))
            
#             processed_international = []
#             for flight in sample_data['international_flights']['data']:
#                 processed_international.append(self.process_flight_data(flight))
            
#             summary = {
#                 "crawl_summary": {
#                     "crawl_time": datetime.datetime.now().isoformat(),
#                     "total_domestic_flights": len(processed_domestic),
#                     "total_international_flights": len(processed_international),
#                     "total_flights": len(processed_domestic) + len(processed_international),
#                     "airports_info": self.vietnam_airports,
#                     "data_source": "sample_data",
#                     "note": "D·ªØ li·ªáu m·∫´u - API kh√¥ng kh·∫£ d·ª•ng"
#                 },
#                 "domestic_flights": {
#                     "count": len(processed_domestic),
#                     "data": processed_domestic
#                 },
#                 "international_flights": {
#                     "count": len(processed_international),
#                     "data": processed_international
#                 }
#             }
            
#             # L∆∞u k·∫øt qu·∫£
#             self.save_to_json(summary, f'vietnam_flights_sample_{datetime.datetime.now().strftime("%Y%m%d_%H%M%S")}.json')
            
#             # L∆∞u v√†o Elasticsearch
#             if self.es:
#                 print("\nüìä ƒêANG L∆ØU D·ªÆ LI·ªÜU M·∫™U V√ÄO ELASTICSEARCH...")
#                 self.create_elasticsearch_index()
#                 self.save_flights_to_elasticsearch(summary)
            
#             # In b√°o c√°o
#             self.print_summary(summary)
            
#             return summary
        
#         # 1. Crawl chuy·∫øn bay n·ªôi ƒë·ªãa
#         domestic_flights = self.get_domestic_flights(limit=50)
        
#         # 2. Crawl chuy·∫øn bay qu·ªëc t·∫ø t·ªõi Vi·ªát Nam
#         international_flights = self.get_international_flights_to_vietnam(limit=50)
        
#         # 3. X·ª≠ l√Ω d·ªØ li·ªáu
#         processed_domestic = []
#         for flight in domestic_flights['data']:
#             processed_domestic.append(self.process_flight_data(flight))
        
#         processed_international = []
#         for flight in international_flights['data']:
#             processed_international.append(self.process_flight_data(flight))
        
#         # 4. T·∫°o b√°o c√°o t·ªïng h·ª£p
#         summary = {
#             "crawl_summary": {
#                 "crawl_time": datetime.datetime.now().isoformat(),
#                 "total_domestic_flights": len(processed_domestic),
#                 "total_international_flights": len(processed_international),
#                 "total_flights": len(processed_domestic) + len(processed_international),
#                 "airports_info": self.vietnam_airports
#             },
#             "domestic_flights": {
#                 "count": len(processed_domestic),
#                 "data": processed_domestic
#             },
#             "international_flights": {
#                 "count": len(processed_international),
#                 "data": processed_international
#             }
#         }
        
#         # 5. L∆∞u k·∫øt qu·∫£
#         self.save_to_json(summary, f'vietnam_flights_{datetime.datetime.now().strftime("%Y%m%d_%H%M%S")}.json')
        
#         # 6. L∆∞u v√†o Elasticsearch
#         if self.es:
#             print("\nüìä ƒêANG L∆ØU D·ªÆ LI·ªÜU V√ÄO ELASTICSEARCH...")
#             self.create_elasticsearch_index()
#             self.save_flights_to_elasticsearch(summary)
        
#         # 7. In b√°o c√°o
#         self.print_summary(summary)
        
#         return summary

#     # def print_summary(self, data: Dict):
#     #     """In b√°o c√°o t√≥m t·∫Øt"""
#     #     print("\n" + "="*60)
#     #     print("B√ÅO C√ÅO T√ìM T·∫ÆT")
#     #     print("="*60)
        
#     #     summary = data['crawl_summary']
#     #     print(f"Th·ªùi gian crawl: {summary['crawl_time']}")
#     #     print(f"T·ªïng s·ªë chuy·∫øn bay: {summary['total_flights']}")
#     #     print(f"- Chuy·∫øn bay n·ªôi ƒë·ªãa: {summary['total_domestic_flights']}")
#     #     print(f"- Chuy·∫øn bay qu·ªëc t·∫ø: {summary['total_international_flights']}")
        
#     #     print(f"\nC√°c s√¢n bay du l·ªãch ƒë∆∞·ª£c theo d√µi:")
#     #     for code, info in summary['airports_info'].items():
#     #         print(f"- {code}: {info['name']} ({info['city']}) - {info['region']}")
        
#     #     # Th·ªëng k√™ chuy·∫øn bay n·ªôi ƒë·ªãa theo th√†nh ph·ªë
#     #     print(f"\nChuy·∫øn bay n·ªôi ƒë·ªãa theo th√†nh ph·ªë ƒë·∫øn:")
#     #     city_stats = {}
#     #     for flight in data['domestic_flights']['data']:
#     #         city = flight['arrival']['city']
#     #         city_stats[city] = city_stats.get(city, 0) + 1
        
#     #     for city, count in sorted(city_stats.items(), key=lambda x: x[1], reverse=True):
#     #         print(f"- {city}: {count} chuy·∫øn bay")
        
#     #     print("\n" + "="*60)

#     def create_elasticsearch_index(self, index_name: str = "vietnam_flights"):
#         """T·∫°o index trong Elasticsearch v·ªõi mapping ph√π h·ª£p"""
#         if not self.es:
#             print("‚ùå Elasticsearch kh√¥ng kh·∫£ d·ª•ng")
#             return False
        
#         # Mapping cho d·ªØ li·ªáu chuy·∫øn bay
#         mapping = {
#             "mappings": {
#                 "properties": {
#                     "flight_info": {
#                         "properties": {
#                             "number": {"type": "keyword"},
#                             "iata": {"type": "keyword"},
#                             "date": {"type": "date"},
#                             "status": {"type": "keyword"}
#                         }
#                     },
#                     "airline": {
#                         "properties": {
#                             "name": {"type": "text", "analyzer": "standard"},
#                             "iata": {"type": "keyword"},
#                             "icao": {"type": "keyword"}
#                         }
#                     },
#                     "departure": {
#                         "properties": {
#                             "airport": {"type": "text", "analyzer": "standard"},
#                             "iata": {"type": "keyword"},
#                             "city": {"type": "text", "analyzer": "standard"},
#                             "terminal": {"type": "keyword"},
#                             "gate": {"type": "keyword"},
#                             "scheduled": {"type": "date"},
#                             "estimated": {"type": "date"},
#                             "actual": {"type": "date"},
#                             "delay": {"type": "integer"}
#                         }
#                     },
#                     "arrival": {
#                         "properties": {
#                             "airport": {"type": "text", "analyzer": "standard"},
#                             "iata": {"type": "keyword"},
#                             "city": {"type": "text", "analyzer": "standard"},
#                             "region": {"type": "keyword"},
#                             "terminal": {"type": "keyword"},
#                             "gate": {"type": "keyword"},
#                             "scheduled": {"type": "date"},
#                             "estimated": {"type": "date"},
#                             "actual": {"type": "date"},
#                             "delay": {"type": "integer"}
#                         }
#                     },
#                     "aircraft": {
#                         "properties": {
#                             "registration": {"type": "keyword"},
#                             "iata": {"type": "keyword"},
#                             "icao": {"type": "keyword"}
#                         }
#                     },
#                     "search_text": {
#                         "type": "text", 
#                         "analyzer": "standard"
#                     },
#                     "flight_type": {"type": "keyword"},
#                     "created_at": {"type": "date"}
#                 }
#             }
#         }
        
#         try:
#             # X√≥a index c≈© n·∫øu t·ªìn t·∫°i
#             if self.es.indices.exists(index=index_name):
#                 self.es.indices.delete(index=index_name)
#                 print(f"üóëÔ∏è ƒê√£ x√≥a index c≈©: {index_name}")
            
#             # T·∫°o index m·ªõi
#             self.es.indices.create(index=index_name, body=mapping)
#             print(f"‚úÖ ƒê√£ t·∫°o index Elasticsearch: {index_name}")
#             return True
            
#         except Exception as e:
#             print(f"‚ùå L·ªói t·∫°o index Elasticsearch: {e}")
#             return False

#     def prepare_flight_for_elasticsearch(self, flight: Dict, flight_type: str = "domestic") -> Dict:
#         """Chu·∫©n b·ªã d·ªØ li·ªáu chuy·∫øn bay ƒë·ªÉ l∆∞u v√†o Elasticsearch"""
#         # T·∫°o text t√¨m ki·∫øm t·ªïng h·ª£p
#         search_components = [
#             flight.get('flight_info', {}).get('number', ''),
#             flight.get('flight_info', {}).get('iata', ''),
#             flight.get('airline', {}).get('name', ''),
#             flight.get('departure', {}).get('airport', ''),
#             flight.get('departure', {}).get('city', ''),
#             flight.get('arrival', {}).get('airport', ''),
#             flight.get('arrival', {}).get('city', ''),
#             flight.get('arrival', {}).get('region', ''),
#         ]
        
#         search_text = ' '.join(filter(None, search_components))
        
#         # Th√™m c√°c tr∆∞·ªùng b·ªï sung
#         flight['search_text'] = search_text
#         flight['flight_type'] = flight_type
#         flight['created_at'] = datetime.datetime.now().isoformat()
        
#         return flight

#     def save_flights_to_elasticsearch(self, flights_data: Dict, index_name: str = "vietnam_flights") -> bool:
#         """L∆∞u danh s√°ch chuy·∫øn bay v√†o Elasticsearch"""
#         if not self.es:
#             print("‚ùå Elasticsearch kh√¥ng kh·∫£ d·ª•ng")
#             return False
        
#         try:
#             # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ bulk insert
#             actions = []
            
#             # Chuy·∫øn bay n·ªôi ƒë·ªãa
#             for flight in flights_data['domestic_flights']['data']:
#                 prepared_flight = self.prepare_flight_for_elasticsearch(flight, "domestic")
#                 action = {
#                     "_index": index_name,
#                     "_source": prepared_flight
#                 }
#                 actions.append(action)
            
#             # Chuy·∫øn bay qu·ªëc t·∫ø
#             for flight in flights_data['international_flights']['data']:
#                 prepared_flight = self.prepare_flight_for_elasticsearch(flight, "international")
#                 action = {
#                     "_index": index_name,
#                     "_source": prepared_flight
#                 }
#                 actions.append(action)
            
#             # Bulk insert
#             if actions:
#                 success, failed = bulk(self.es, actions)
#                 print(f"‚úÖ ƒê√£ l∆∞u {success} chuy·∫øn bay v√†o Elasticsearch")
#                 if failed:
#                     print(f"‚ùå {len(failed)} chuy·∫øn bay l∆∞u th·∫•t b·∫°i")
#                 return True
#             else:
#                 print("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ l∆∞u v√†o Elasticsearch")
#                 return False
                
#         except Exception as e:
#             print(f"‚ùå L·ªói l∆∞u d·ªØ li·ªáu v√†o Elasticsearch: {e}")
#             return False

    
# def main():
#     """H√†m ch√≠nh ƒë·ªÉ ch·∫°y crawler"""
#     # API key c·ªßa b·∫°n
#     API_KEY = "9df4acf29081bd44b7fcca42f2c77821"
    
#     print("üõ´ VIETNAM FLIGHT CRAWLER üõ¨")
#     print("="*60)
#     print("Crawl d·ªØ li·ªáu chuy·∫øn bay v√† l∆∞u v√†o Elasticsearch...")
#     print("="*60)
    
#     # T·∫°o crawler instance
#     crawler = FlightCrawler(API_KEY)
    
#     # Ch·∫°y crawl
#     results = crawler.crawl_all_vietnam_flights()
    
#     print("\n‚úÖ Crawl ho√†n th√†nh!")
#     if crawler.es:
#         print("üìä D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o Elasticsearch")
#     else:
#         print("‚ö†Ô∏è Elasticsearch kh√¥ng kh·∫£ d·ª•ng - ch·ªâ l∆∞u file JSON")

# if __name__ == "__main__":
#     main()